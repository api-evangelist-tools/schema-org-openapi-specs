{
	"swagger": "2.0",
	"info": {
		"title": "Thing API",
		"description": "The most generic type of item.",
		"termsOfService": "http://apievangelist.com/terms-of-service.html",
		"version": "v1"
	},
	"host": "thing.example.com",
	"basePath": "/",
	"schemes": ["http"],
	"produces": ["application/json"],
	"paths": {
		"/thing/": {
			"get": {
				"summary": "Get Thing",
				"description": "Returns Thing",
				"operationId": "getThing",
				"parameters": [{
					"name": "q",
					"in": "query",
					"description": "Keyword search for item",
					"required": false,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/item"
							}
						}
					}
				},
				"tags": ["Thing"]
			},
			"post": {
				"summary": "Add Thing",
				"description": "Add Thing",
				"operationId": "addThing",
				"parameters": [{
					"name": "about",
					"in": "formData",
					"description": "The subject matter of the content. ",
					"required": false,
					"type": "creativework or communicateaction"
				},
				{
					"name": "actionoption",
					"in": "formData",
					"description": "A sub property of object. The options subject to this action.  Supersedes option.",
					"required": false,
					"type": "chooseaction"
				},
				{
					"name": "additionaltype",
					"in": "formData",
					"description": "An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.",
					"required": false,
					"type": "url"
				},
				{
					"name": "alternatename",
					"in": "formData",
					"description": "An alias for the item.",
					"required": false,
					"type": "text"
				},
				{
					"name": "category",
					"in": "formData",
					"description": "A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy. ",
					"required": false,
					"type": "physicalactivity or offer or invoice or product or service"
				},
				{
					"name": "characterattribute",
					"in": "formData",
					"description": "A piece of data that represents a particular aspect of a fictional character (skill, power, character points, advantage, disadvantage). ",
					"required": false,
					"type": "game or videogameseries"
				},
				{
					"name": "datafeedelement",
					"in": "formData",
					"description": "An item within in a data feed. Data feeds may have many elements. ",
					"required": false,
					"type": "datafeed"
				},
				{
					"name": "defaultvalue",
					"in": "formData",
					"description": "The default value of the input.  For properties that expect a literal, the default is a literal value, for properties that expect an object, it's an ID reference to one of the current values. ",
					"required": false,
					"type": "propertyvaluespecification"
				},
				{
					"name": "description",
					"in": "formData",
					"description": "A short description of the item.",
					"required": false,
					"type": "text"
				},
				{
					"name": "error",
					"in": "formData",
					"description": "For failed actions, more information on the cause of the failure. ",
					"required": false,
					"type": "action"
				},
				{
					"name": "gameitem",
					"in": "formData",
					"description": "An item is an object within the game world that can be collected by a player or, occasionally, a non-player character. ",
					"required": false,
					"type": "game or videogameseries"
				},
				{
					"name": "gameplatform",
					"in": "formData",
					"description": "The electronic systems used to play video games. ",
					"required": false,
					"type": "videogameseries or videogame"
				},
				{
					"name": "image",
					"in": "formData",
					"description": "An image of the item. This can be a URL or a fully described ImageObject.",
					"required": false,
					"type": "url or  imageobject"
				},
				{
					"name": "instrument",
					"in": "formData",
					"description": "The object that helped the agent perform the action. e.g. John wrote a book with *a pen*. ",
					"required": false,
					"type": "action"
				},
				{
					"name": "item",
					"in": "formData",
					"description": "An entity represented by an entry in a list or data feed (e.g. an 'artist' in a list of 'artists')u2019. ",
					"required": false,
					"type": "listitem or datafeeditem"
				},
				{
					"name": "itemlistelement",
					"in": "formData",
					"description": "For itemListElement values, you can use simple strings (e.g. "Peter", "Paul", "Mary"), existing entities, or use ListItem.        Text values are best if the elements in the list are plain strings. Existing entities are best for a simple, unordered list of existing things in your data. ListItem is used with ordered lists when you want to provide additional context about the element in that list or when the same item might be in different places in different lists.        Note: The order of elements in your mark-up is not sufficient for indicating the order or elements.  Use ListItem with a 'position' property in such cases. ",
					"required": false,
					"type": "itemlist"
				},
				{
					"name": "itemreviewed",
					"in": "formData",
					"description": "The item that is being reviewed/rated. ",
					"required": false,
					"type": "aggregaterating or review"
				},
				{
					"name": "mainentity",
					"in": "formData",
					"description": "Indicates the primary entity described in some page or other CreativeWork.  inverse property: mainEntityOfPage.",
					"required": false,
					"type": "creativework"
				},
				{
					"name": "mainentityofpage",
					"in": "formData",
					"description": "Indicates a page (or other CreativeWork) for which this thing is the main entity being described.            See background notes for details.       Inverse property: mainEntity.",
					"required": false,
					"type": "creativework or  url"
				},
				{
					"name": "mentions",
					"in": "formData",
					"description": "Indicates that the CreativeWork contains a reference to, but is not necessarily about a concept. ",
					"required": false,
					"type": "creativework"
				},
				{
					"name": "name",
					"in": "formData",
					"description": "The name of the item.",
					"required": false,
					"type": "text"
				},
				{
					"name": "object",
					"in": "formData",
					"description": "The object upon the action is carried out, whose state is kept intact or changed. Also known as the semantic roles patient, affected or undergoer (which change their state) or theme (which doesn't). e.g. John read *a book*. ",
					"required": false,
					"type": "action"
				},
				{
					"name": "potentialaction",
					"in": "formData",
					"description": "Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.",
					"required": false,
					"type": "action"
				},
				{
					"name": "purpose",
					"in": "formData",
					"description": "A goal towards an action is taken. Can be concrete or abstract. ",
					"required": false,
					"type": "medicaldevice or allocateaction or payaction"
				},
				{
					"name": "quest",
					"in": "formData",
					"description": "The task that a player-controlled character, or group of characters may complete in order to gain a reward. ",
					"required": false,
					"type": "game or videogameseries"
				},
				{
					"name": "replacee",
					"in": "formData",
					"description": "A sub property of object. The object that is being replaced. ",
					"required": false,
					"type": "replaceaction"
				},
				{
					"name": "replacer",
					"in": "formData",
					"description": "A sub property of object. The object that replaces. ",
					"required": false,
					"type": "replaceaction"
				},
				{
					"name": "reservationfor",
					"in": "formData",
					"description": "The thing -- flight, event, restaurant,etc. being reserved. ",
					"required": false,
					"type": "reservation"
				},
				{
					"name": "result",
					"in": "formData",
					"description": "The result produced in the action. e.g. John wrote *a book*. ",
					"required": false,
					"type": "action"
				},
				{
					"name": "sameas",
					"in": "formData",
					"description": "URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.",
					"required": false,
					"type": "url"
				},
				{
					"name": "serviceoutput",
					"in": "formData",
					"description": "The tangible thing generated by the service, e.g. a passport, permit, etc.  Supersedes produces.",
					"required": false,
					"type": "service"
				},
				{
					"name": "targetcollection",
					"in": "formData",
					"description": "A sub property of object. The collection target of the action.  Supersedes collection.",
					"required": false,
					"type": "updateaction"
				},
				{
					"name": "url",
					"in": "formData",
					"description": "URL of the item.",
					"required": false,
					"type": "url"
				}],
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/item"
							}
						}
					}
				},
				"tags": ["Thing"]
			}
		},
		"/thing/{id}/": {
			"get": {
				"summary": "Get Thing",
				"description": "Returns a single Thing",
				"operationId": "getThing",
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "Unique id for item",
					"required": true,
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/item"
							}
						}
					}
				},
				"tags": ["Thing"]
			},
			"put": {
				"summary": "Update Thing",
				"description": "Update a single Thing",
				"operationId": "updateThingItem",
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "Unique id for item",
					"required": true,
					"type": "integer"
				},
				{
					"name": "about",
					"in": "formData",
					"description": "The subject matter of the content. ",
					"required": false,
					"type": "creativework or communicateaction"
				},
				{
					"name": "actionoption",
					"in": "formData",
					"description": "A sub property of object. The options subject to this action.  Supersedes option.",
					"required": false,
					"type": "chooseaction"
				},
				{
					"name": "additionaltype",
					"in": "formData",
					"description": "An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.",
					"required": false,
					"type": "url"
				},
				{
					"name": "alternatename",
					"in": "formData",
					"description": "An alias for the item.",
					"required": false,
					"type": "text"
				},
				{
					"name": "category",
					"in": "formData",
					"description": "A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy. ",
					"required": false,
					"type": "physicalactivity or offer or invoice or product or service"
				},
				{
					"name": "characterattribute",
					"in": "formData",
					"description": "A piece of data that represents a particular aspect of a fictional character (skill, power, character points, advantage, disadvantage). ",
					"required": false,
					"type": "game or videogameseries"
				},
				{
					"name": "datafeedelement",
					"in": "formData",
					"description": "An item within in a data feed. Data feeds may have many elements. ",
					"required": false,
					"type": "datafeed"
				},
				{
					"name": "defaultvalue",
					"in": "formData",
					"description": "The default value of the input.  For properties that expect a literal, the default is a literal value, for properties that expect an object, it's an ID reference to one of the current values. ",
					"required": false,
					"type": "propertyvaluespecification"
				},
				{
					"name": "description",
					"in": "formData",
					"description": "A short description of the item.",
					"required": false,
					"type": "text"
				},
				{
					"name": "error",
					"in": "formData",
					"description": "For failed actions, more information on the cause of the failure. ",
					"required": false,
					"type": "action"
				},
				{
					"name": "gameitem",
					"in": "formData",
					"description": "An item is an object within the game world that can be collected by a player or, occasionally, a non-player character. ",
					"required": false,
					"type": "game or videogameseries"
				},
				{
					"name": "gameplatform",
					"in": "formData",
					"description": "The electronic systems used to play video games. ",
					"required": false,
					"type": "videogameseries or videogame"
				},
				{
					"name": "image",
					"in": "formData",
					"description": "An image of the item. This can be a URL or a fully described ImageObject.",
					"required": false,
					"type": "url or  imageobject"
				},
				{
					"name": "instrument",
					"in": "formData",
					"description": "The object that helped the agent perform the action. e.g. John wrote a book with *a pen*. ",
					"required": false,
					"type": "action"
				},
				{
					"name": "item",
					"in": "formData",
					"description": "An entity represented by an entry in a list or data feed (e.g. an 'artist' in a list of 'artists')u2019. ",
					"required": false,
					"type": "listitem or datafeeditem"
				},
				{
					"name": "itemlistelement",
					"in": "formData",
					"description": "For itemListElement values, you can use simple strings (e.g. "Peter", "Paul", "Mary"), existing entities, or use ListItem.        Text values are best if the elements in the list are plain strings. Existing entities are best for a simple, unordered list of existing things in your data. ListItem is used with ordered lists when you want to provide additional context about the element in that list or when the same item might be in different places in different lists.        Note: The order of elements in your mark-up is not sufficient for indicating the order or elements.  Use ListItem with a 'position' property in such cases. ",
					"required": false,
					"type": "itemlist"
				},
				{
					"name": "itemreviewed",
					"in": "formData",
					"description": "The item that is being reviewed/rated. ",
					"required": false,
					"type": "aggregaterating or review"
				},
				{
					"name": "mainentity",
					"in": "formData",
					"description": "Indicates the primary entity described in some page or other CreativeWork.  inverse property: mainEntityOfPage.",
					"required": false,
					"type": "creativework"
				},
				{
					"name": "mainentityofpage",
					"in": "formData",
					"description": "Indicates a page (or other CreativeWork) for which this thing is the main entity being described.            See background notes for details.       Inverse property: mainEntity.",
					"required": false,
					"type": "creativework or  url"
				},
				{
					"name": "mentions",
					"in": "formData",
					"description": "Indicates that the CreativeWork contains a reference to, but is not necessarily about a concept. ",
					"required": false,
					"type": "creativework"
				},
				{
					"name": "name",
					"in": "formData",
					"description": "The name of the item.",
					"required": false,
					"type": "text"
				},
				{
					"name": "object",
					"in": "formData",
					"description": "The object upon the action is carried out, whose state is kept intact or changed. Also known as the semantic roles patient, affected or undergoer (which change their state) or theme (which doesn't). e.g. John read *a book*. ",
					"required": false,
					"type": "action"
				},
				{
					"name": "potentialaction",
					"in": "formData",
					"description": "Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.",
					"required": false,
					"type": "action"
				},
				{
					"name": "purpose",
					"in": "formData",
					"description": "A goal towards an action is taken. Can be concrete or abstract. ",
					"required": false,
					"type": "medicaldevice or allocateaction or payaction"
				},
				{
					"name": "quest",
					"in": "formData",
					"description": "The task that a player-controlled character, or group of characters may complete in order to gain a reward. ",
					"required": false,
					"type": "game or videogameseries"
				},
				{
					"name": "replacee",
					"in": "formData",
					"description": "A sub property of object. The object that is being replaced. ",
					"required": false,
					"type": "replaceaction"
				},
				{
					"name": "replacer",
					"in": "formData",
					"description": "A sub property of object. The object that replaces. ",
					"required": false,
					"type": "replaceaction"
				},
				{
					"name": "reservationfor",
					"in": "formData",
					"description": "The thing -- flight, event, restaurant,etc. being reserved. ",
					"required": false,
					"type": "reservation"
				},
				{
					"name": "result",
					"in": "formData",
					"description": "The result produced in the action. e.g. John wrote *a book*. ",
					"required": false,
					"type": "action"
				},
				{
					"name": "sameas",
					"in": "formData",
					"description": "URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.",
					"required": false,
					"type": "url"
				},
				{
					"name": "serviceoutput",
					"in": "formData",
					"description": "The tangible thing generated by the service, e.g. a passport, permit, etc.  Supersedes produces.",
					"required": false,
					"type": "service"
				},
				{
					"name": "targetcollection",
					"in": "formData",
					"description": "A sub property of object. The collection target of the action.  Supersedes collection.",
					"required": false,
					"type": "updateaction"
				},
				{
					"name": "url",
					"in": "formData",
					"description": "URL of the item.",
					"required": false,
					"type": "url"
				}],
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/item"
							}
						}
					}
				},
				"tags": ["Thing"]
			},
			"delete": {
				"summary": "Thing",
				"description": "Deletes a single Thing",
				"operationId": "deleteThing",
				"parameters": [{
					"name": "id",
					"in": "path",
					"description": "Unique id for item",
					"required": true,
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "A successful response.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/item"
							}
						}
					}
				},
				"tags": ["Thing"]
			}
		}
	},
	"definitions": {
		"item": {
			"properties": [{
				"name": {
					"description": "about",
					"type": "creativework or communicateaction"
				},
				"description": {
					"description": "The subject matter of the content. ",
					"type": "creativework or communicateaction"
				}
			},
			{
				"name": {
					"description": "actionoption",
					"type": "chooseaction"
				},
				"description": {
					"description": "A sub property of object. The options subject to this action.  Supersedes option.",
					"type": "chooseaction"
				}
			},
			{
				"name": {
					"description": "additionaltype",
					"type": "url"
				},
				"description": {
					"description": "An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.",
					"type": "url"
				}
			},
			{
				"name": {
					"description": "alternatename",
					"type": "text"
				},
				"description": {
					"description": "An alias for the item.",
					"type": "text"
				}
			},
			{
				"name": {
					"description": "category",
					"type": "physicalactivity or offer or invoice or product or service"
				},
				"description": {
					"description": "A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy. ",
					"type": "physicalactivity or offer or invoice or product or service"
				}
			},
			{
				"name": {
					"description": "characterattribute",
					"type": "game or videogameseries"
				},
				"description": {
					"description": "A piece of data that represents a particular aspect of a fictional character (skill, power, character points, advantage, disadvantage). ",
					"type": "game or videogameseries"
				}
			},
			{
				"name": {
					"description": "datafeedelement",
					"type": "datafeed"
				},
				"description": {
					"description": "An item within in a data feed. Data feeds may have many elements. ",
					"type": "datafeed"
				}
			},
			{
				"name": {
					"description": "defaultvalue",
					"type": "propertyvaluespecification"
				},
				"description": {
					"description": "The default value of the input.  For properties that expect a literal, the default is a literal value, for properties that expect an object, it's an ID reference to one of the current values. ",
					"type": "propertyvaluespecification"
				}
			},
			{
				"name": {
					"description": "description",
					"type": "text"
				},
				"description": {
					"description": "A short description of the item.",
					"type": "text"
				}
			},
			{
				"name": {
					"description": "error",
					"type": "action"
				},
				"description": {
					"description": "For failed actions, more information on the cause of the failure. ",
					"type": "action"
				}
			},
			{
				"name": {
					"description": "gameitem",
					"type": "game or videogameseries"
				},
				"description": {
					"description": "An item is an object within the game world that can be collected by a player or, occasionally, a non-player character. ",
					"type": "game or videogameseries"
				}
			},
			{
				"name": {
					"description": "gameplatform",
					"type": "videogameseries or videogame"
				},
				"description": {
					"description": "The electronic systems used to play video games. ",
					"type": "videogameseries or videogame"
				}
			},
			{
				"name": {
					"description": "image",
					"type": "url or  imageobject"
				},
				"description": {
					"description": "An image of the item. This can be a URL or a fully described ImageObject.",
					"type": "url or  imageobject"
				}
			},
			{
				"name": {
					"description": "instrument",
					"type": "action"
				},
				"description": {
					"description": "The object that helped the agent perform the action. e.g. John wrote a book with *a pen*. ",
					"type": "action"
				}
			},
			{
				"name": {
					"description": "item",
					"type": "listitem or datafeeditem"
				},
				"description": {
					"description": "An entity represented by an entry in a list or data feed (e.g. an 'artist' in a list of 'artists')u2019. ",
					"type": "listitem or datafeeditem"
				}
			},
			{
				"name": {
					"description": "itemlistelement",
					"type": "itemlist"
				},
				"description": {
					"description": "For itemListElement values, you can use simple strings (e.g. "Peter", "Paul", "Mary"), existing entities, or use ListItem.        Text values are best if the elements in the list are plain strings. Existing entities are best for a simple, unordered list of existing things in your data. ListItem is used with ordered lists when you want to provide additional context about the element in that list or when the same item might be in different places in different lists.        Note: The order of elements in your mark-up is not sufficient for indicating the order or elements.  Use ListItem with a 'position' property in such cases. ",
					"type": "itemlist"
				}
			},
			{
				"name": {
					"description": "itemreviewed",
					"type": "aggregaterating or review"
				},
				"description": {
					"description": "The item that is being reviewed/rated. ",
					"type": "aggregaterating or review"
				}
			},
			{
				"name": {
					"description": "mainentity",
					"type": "creativework"
				},
				"description": {
					"description": "Indicates the primary entity described in some page or other CreativeWork.  inverse property: mainEntityOfPage.",
					"type": "creativework"
				}
			},
			{
				"name": {
					"description": "mainentityofpage",
					"type": "creativework or  url"
				},
				"description": {
					"description": "Indicates a page (or other CreativeWork) for which this thing is the main entity being described.            See background notes for details.       Inverse property: mainEntity.",
					"type": "creativework or  url"
				}
			},
			{
				"name": {
					"description": "mentions",
					"type": "creativework"
				},
				"description": {
					"description": "Indicates that the CreativeWork contains a reference to, but is not necessarily about a concept. ",
					"type": "creativework"
				}
			},
			{
				"name": {
					"description": "name",
					"type": "text"
				},
				"description": {
					"description": "The name of the item.",
					"type": "text"
				}
			},
			{
				"name": {
					"description": "object",
					"type": "action"
				},
				"description": {
					"description": "The object upon the action is carried out, whose state is kept intact or changed. Also known as the semantic roles patient, affected or undergoer (which change their state) or theme (which doesn't). e.g. John read *a book*. ",
					"type": "action"
				}
			},
			{
				"name": {
					"description": "potentialaction",
					"type": "action"
				},
				"description": {
					"description": "Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.",
					"type": "action"
				}
			},
			{
				"name": {
					"description": "purpose",
					"type": "medicaldevice or allocateaction or payaction"
				},
				"description": {
					"description": "A goal towards an action is taken. Can be concrete or abstract. ",
					"type": "medicaldevice or allocateaction or payaction"
				}
			},
			{
				"name": {
					"description": "quest",
					"type": "game or videogameseries"
				},
				"description": {
					"description": "The task that a player-controlled character, or group of characters may complete in order to gain a reward. ",
					"type": "game or videogameseries"
				}
			},
			{
				"name": {
					"description": "replacee",
					"type": "replaceaction"
				},
				"description": {
					"description": "A sub property of object. The object that is being replaced. ",
					"type": "replaceaction"
				}
			},
			{
				"name": {
					"description": "replacer",
					"type": "replaceaction"
				},
				"description": {
					"description": "A sub property of object. The object that replaces. ",
					"type": "replaceaction"
				}
			},
			{
				"name": {
					"description": "reservationfor",
					"type": "reservation"
				},
				"description": {
					"description": "The thing -- flight, event, restaurant,etc. being reserved. ",
					"type": "reservation"
				}
			},
			{
				"name": {
					"description": "result",
					"type": "action"
				},
				"description": {
					"description": "The result produced in the action. e.g. John wrote *a book*. ",
					"type": "action"
				}
			},
			{
				"name": {
					"description": "sameas",
					"type": "url"
				},
				"description": {
					"description": "URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Freebase page, or official website.",
					"type": "url"
				}
			},
			{
				"name": {
					"description": "serviceoutput",
					"type": "service"
				},
				"description": {
					"description": "The tangible thing generated by the service, e.g. a passport, permit, etc.  Supersedes produces.",
					"type": "service"
				}
			},
			{
				"name": {
					"description": "targetcollection",
					"type": "updateaction"
				},
				"description": {
					"description": "A sub property of object. The collection target of the action.  Supersedes collection.",
					"type": "updateaction"
				}
			},
			{
				"name": {
					"description": "url",
					"type": "url"
				},
				"description": {
					"description": "URL of the item.",
					"type": "url"
				}
			}]
		}
	}
}